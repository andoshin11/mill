// THIS FILE IS GENERATED BY CODE GENERATOR. DO NOT CHANGE MANUALLY.
/* tslint:disable */
/* eslint-disable */
<%_ definitions.forEach(definition => { _%>
import <%= definition.name %> from "./<%= definitionDir %>/<%= definition.name %>";
<%_ }); _%>

export namespace <%= namespace %> {
  <%_ operations.forEach(operation => { _%>
    <%_ if (operation.requestBody && operation.requestBody.isRef) { _%>
  export type <%= operation.name %>Request = <%= operation.requestBody.type %>;
    <%_ } else { _%>
  export interface <%= operation.name %>Request {
    <%_ if (operation.requestBody && !helper.isEmpty(operation.requestBody.properties)) { _%>
      <%_ Object.entries(operation.requestBody.properties).forEach(([ _name, _schema ]) => { _%>
        <%- include('./property', { name: _name, schema: _schema, helper }) _%>
      <%_ });
    }; _%>
    <%_ if (operation.queryParameter && !helper.isEmpty(operation.queryParameter.properties)) { _%>
      <%_ Object.entries(operation.queryParameter.properties).forEach(([ _name, _schema ]) => { _%>
        <%- include('./property', { name: _name, schema: _schema, helper }) _%>
      <%_ });
    }; _%>
  }
    <%_ }; _%>

    <%_ if (operation.response && operation.response.isRef) { _%>
  export type <%= operation.name %>Response = <%= operation.response.type %>
    <%_ } else { _%>
  export interface <%= operation.name %>Response {
    <%_ if (operation.response && !helper.isEmpty(operation.response.properties)) { _%>
      <%_ Object.entries(operation.response.properties).forEach(([ _name, _schema ]) => { _%>
        <%- include('./property', { name: _name, schema: _schema, helper }) _%>
      <%_ });
    }; _%>
  }
    <% }; %>

    <%_ if (operation.pathParameter && operation.pathParameter.isRef) { _%>
  export type <%= operation.name %>PathParameter = <%= operation.pathParameter.type %>
    <%_ } else { _%>
  export interface <%= operation.name %>PathParameter {
    <%_ if (operation.pathParameter && !helper.isEmpty(operation.pathParameter.properties)) { _%>
      <%_ Object.entries(operation.pathParameter.properties).forEach(([ _name, _schema ]) => { _%>
        <%- include('./property', { name: _name, schema: _schema, helper }) _%>
      <%_ });
    }; _%>
  }
    <% }; %>



  <%_ if (operation.errors) { _%>
      <%_ Object.entries(operation.errors).forEach(([statusCode, schema]) => { _%>
    export interface <%= operation.name %><%= parseInt(statusCode, 10) %>Error {
      <%_ if (schema && !helper.isEmpty(schema.properties)) { _%>
        <%_ Object.entries(schema.properties).forEach(([ _name, _schema ]) => { _%>
      <%- include('./property', { name: _name, schema: _schema, helper }) _%>
        <%_ });
          }; _%>
    }
      <%_ }); _%>
    <% }; %>

  <%_ }); _%>
}
